[user]
author = Fearghal Morgan
email = fearghal.morgan1@gmail.com
company = University of Galway
vivado.bat = C:/Xilinx/Vivado/2019.1/bin/vivado.bat
recentenviro = C:/Users/User/HDLGen/Sample_Projects
quartus = C:/intelFPGA_lite/22.1std/quartus/bin64/quartus.exe
vhdlchatgptmodel = ~ HDLGen-ChatGPT generates the following HDL model generation ChatGPT prompt, which includes
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  HDL model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   library declarations
	~   entity declaration
	~   architecture
	~     signal declarations
	~     component declarations, if hierarchical model
	~   component instantiations, if hierarchical design
	~   concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	~   processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	
	~ ChatGPT does not always generate VHDL code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	
	~ Individual prompts from the list (or new prompts) can be re-submitted to ChatGPT, if the current ChatGPT output is not fully correct.
	~ Commonly used 'follow-on' prompts are highlighted using *** in this file
	~ To use, copy, remove *** and paste into ChatGPT
	~ ***
	~  continue
	~ Click ChatGPT '> Continue generating' button, to continue, using the same code box
	~   requests ChatGPT to continue an incomplete output
	~ To target an update to code within a specific process (faster than applying to the complete HDL model), add the prefix
	~  For process <processName>,
	~ or
	~ Output the architecture only, including null in others case statement if a default assignment is included in a case statement
	
	Complete the following VHDL model, and output in a single formatted code box.
	~ Generate the complete VHDL model in a single code box, using the HDL model generation ChatGPT prompt
	~***Reserved for processes***
	~***Reserved for concurrent statements***
	Do not remove any comments beginning with '-- ', i.e, only two dashes
	
	For each line between -- Title section start and -- Title section end, improve the text formatting
	~ HDLGen-ChatGPT generates the HDL model title section from text captured by the user. Improve the title section text formatting.
	~ ***
	~  Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
	~  Optional prompt, to speed up the ChatGPT HDL model generation, by removing the title section generation output
	
	~ Series of ChatGPT prompts
	For each line containing the prefix '--- ', generate VHDL code describing the logic, applying the following rules
	~ ***
	For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
	~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
	~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
	~ + function supports the following overloaded operations
	~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
	~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
	~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
	~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
	~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
	~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
	~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
	~  This uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
	~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
	~ If ChatGPT generates addOut <= addin1 + addIn0;  EDA tool may highlight an error, such as 'Cannot determine exact overloaded match definition for "+"'
	~ If so, re-run the above prompt
	
	
	If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
	~-- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
	~-- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
	~-- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
	~-- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
	~-- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
	~-- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
	~-- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
	~-- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
	~ If using std_logic_vector signal as index, must first convert (type cast) to unsigned type, then convert to integer (TO_INTEGER function D.1) and use as integer array index
	
	Convert shift_left and shift_right function outputs to signal type std_logic_vector.
	~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify this line.
	
	Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
	~ Self-explanatory
	
	Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the full width of the target signal.
	Use X"0000" format to describe a hexadecimal constant assignment, rather than 16~0000~.
	~ Ensure that leading zeros are correct, using binary value in ""
	
	For assignments such as sigOut = 16{sigIn}, which describes an assignment of each bit of a 16-bit signal sigOut slice to a single-bit signal sigIn, where sigIn can be constant 0, 1 or a signal name, use a VHDL 'for loop, end loop' to assign each bit of the sigOut slice to the sigIn value.
	An example is MToWB(31 downto 16) = 16(DFrM(15)) generates
	for i in 31 downto 16 loop
	MToWB(i) <= DFrM(15);
	end loop;
	~ Can be to a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ Generate VHDL for each bit of a signal slice to n{signal} in a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ This avoids assignments such as sigA <= x"1" where e.g, sigA has been declared as std_logic_vector(31 downto 0) type.
	
	If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
	~ Use >>> pseudo code operator for shift right arithmetic operation. Requires signed functiuon input signals.
	
	Leave all labels unchanged.
	~ HDLGen-ChatGPT captures the labels for processes, concurrent statements and component instantiation.
	
	For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'
	~ Avoids ChatGPT translating a concurrent statement into a process statement
	
	Remove all assignments in if or case statements which duplicate the default assignment.
	Including null in others case statement if a default assignment is included in a case statement
	~ HDLGen-ChatGPT uses a default signal assignment approach for combinational processes. The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
	
	
	In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1. Do not add "".
	For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
	~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB));   where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
	
	Remove the '--- '  prefix from the line.
	~ logic pseudo code lines are highlighted to ChatGPT with --- prefix, for ChatGPT VHDL generation. Remove the --- after processing.
	
	Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
	~ Self explanatory
	
	For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
	~ VHDL syntax requirement
	
	Only use VHDL which is support by the IEEE VHDL-1987 standard.
	~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987
	
	Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
	~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
	
	~ ***
	In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
	~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
	~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
	
	~repeating
	For all VHDL case statements, include "when others => null;" before every occurrence of an "end case" statement.
vhdlchatgpttestbench = ~
	
	The test plan table format includes
	row 1: input signal names
	row 2: output signal names
	row 3: signal radix
	row 4: column headings TestNo, delay and Note
	column 2: TestNo test number
	column 3: delay
	
	Create a single VHDL process stim_p, in a formatted code box, without any loops
	
	For each TestNo row from value 1, output the following
	TestNo value
	Comment, included in the table Note column.
	Assignment of every input signal, irrespective of its value. Do not assign any output signals. Use the signal radix format defined in table row 3
	wait for (delay  * period); statement, where delay can be integer or real, after all signal stimulus for the row have been assigned, using delay value in the delay column, with brackets () around (delay * period).
	A test of each output signal value and message, comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.
	
	Do not include a loop in the output.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements
	Do not ask me to Add more test. Please generate them all.
verilogchatgptmodel = ~ This ChatGPT message header is used with the HDLGen-generated HDL model template (which can include pseudo code logic descriptions) to generate the complete HDL model.
	
	Complete the following Verilog model, and output in a single formatted code box.
	
	~***Reserved for processes***
	
	~***Reserved for concurrent statements***
	
	For each line between // Title section start and // Title section end, improve formatting of the text.
	
	Do not include input or output keywords in the module declaration
	
	For each line containing the prefix '///', replace with generated Verilog code for the logic described, and remove the '///'.
	
	For each line containing '_c:' in the label, do not generate a sequential statement, do not remove the label containing '_c:', remove the '///', and remove '// Default assignment'
	
	In VERILOG processes, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
	Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
	Use for loop (format for (i=0; i<32; i=i+1) around complete array signal assignments.
	
	Leave all labels unchanged.
	Place the Verilog process line containing '// Default assignment', unchanged, and immediately before the VHDL logic generated for lines containing prefix '///'.
	Do not output the lines containing prefix '///'.
	
	
	
	
	Include <= operator in assignments.
	Make assignment bit widths compatible.
	~For assignments to each bit of a signal slice to the same single-bit signal (constant 0, 1 or a signal name, e.g, sigIn), use the following formats 1,2,3:
	~ 1 sigOut = { 16{sigIn[15]}  }
	~ 2 sigOut = { { 8{sigIn[15]} }, 8b'00000001 }
	~ 3 sigOut = { { 8{sigIn[15]} }, sigIn[7:0] }
	
	Keep all { and } characters in the generated Verilog
	Keep case assignments separate, as specified in the ChatGPT prompt.
	~For assignments which contain an assignment to a signal slice, which includes a concatenated signal bit term, e.g, 16{sigIn[15]}, include an addition set of { } brackets around this term.
	
	
	
	For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
	Remove all lines which contain default:
	
	
	=== For reference. Ignore the following lines.
	=== List of Optional ChatGPT messages, which can be submitted individually after the above ChatGPT message, if the Chat GPT output is not fully correct.
	Repeat, without outputting lines between '-- Title section start' and '-- Title section end'
verilogchatgpttestbench = ~
	
	The test plan table format includes
	row 1: input signal names
	row 2: output signal names
	row 3: signal radix
	row 4: column headings TestNo, delay and Note
	column 2: TestNo test number
	column 3: delay
	
	Create a single VERILOG initial statement, in a formatted code box, without any loops
	TestNo value
	Comment, included in the table Note column.
	Assignment of every input signal, irrespective of its value. Do not assign any output signals. Use the signal radix format defined in table row 3
	"~ (delay value)" statement, where delay can be integer or real, after all signal stimulus for the row have been assigned, using delay value in the delay column, with brackets () around (delay * period), not including any character before the ~ character, and not including TestNo in the line.
	A test of each output signal value and message, comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.
	
	Do not include a loop in the output.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements
	Do not ask me to Add more test. Please generate them all.
vhdlchatgptmodelreset = 
	~ HDLGen-ChatGPT generates the following HDL model generation ChatGPT prompt, which includes
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  HDL model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   library declarations
	~   entity declaration
	~   architecture
	~     signal declarations
	~     component declarations, if hierarchical model
	~   component instantiations, if hierarchical design
	~   concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	~   processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	
	~ ChatGPT does not always generate VHDL code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	
	~ Individual prompts from the list (or new prompts) can be re-submitted to ChatGPT, if the current ChatGPT output is not fully correct.
	~ Commonly used 'follow-on' prompts are highlighted using *** in this file
	~ To use, copy, remove *** and paste into ChatGPT
	~ ***
	~  continue
	~ Click ChatGPT '> Continue generating' button, to continue, using the same code box
	~   requests ChatGPT to continue an incomplete output
	~ To target an update to code within a specific process (faster than applying to the complete HDL model), add the prefix
	~  For process <processName>,
	~ or
	~ Output the architecture only, including null in others case statement if a default assignment is included in a case statement
	
	Complete the following VHDL model, and output in a single formatted code box.
	~ Generate the complete VHDL model in a single code box, using the HDL model generation ChatGPT prompt
	~***Reserved for processes***
	~***Reserved for concurrent statements***
	
	Do not remove any comments beginning with '-- ', i.e, only two dashes
	
	For each line between -- Title section start and -- Title section end, improve the text formatting
	~ HDLGen-ChatGPT generates the HDL model title section from text captured by the user. Improve the title section text formatting.
	~ ***
	~  Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
	~  Optional prompt, to speed up the ChatGPT HDL model generation, by removing the title section generation output
	
	~ Series of ChatGPT prompts
	For each line containing the prefix '--- ', generate VHDL code describing the logic, applying the following rules
	~ ***
	For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
	~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
	~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
	~ + function supports the following overloaded operations
	~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
	~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
	~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
	~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
	~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
	~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
	~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
	~  This uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
	~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
	~ If ChatGPT generates addOut <= addin1 + addIn0;  EDA tool may highlight an error, such as 'Cannot determine exact overloaded match definition for "+"'
	~ If so, re-run the above prompt
	
	
	If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
	~-- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
	~-- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
	~-- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
	~-- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
	~-- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
	~-- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
	~-- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
	~-- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
	~ If using std_logic_vector signal as index, must first convert (type cast) to unsigned type, then convert to integer (TO_INTEGER function D.1) and use as integer array index
	
	Convert shift_left and shift_right function outputs to signal type std_logic_vector.
	~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify this line.
	
	Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
	~ Self-explanatory
	
	Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the full width of the target signal.
	Use X"0000" format to describe a hexadecimal constant assignment, rather than 16~0000~.
	~ Ensure that leading zeros are correct, using binary value in ""
	
	For assignments such as sigOut = 16{sigIn}, which describes an assignment of each bit of a 16-bit signal sigOut slice to a single-bit signal sigIn, where sigIn can be constant 0, 1 or a signal name, use a VHDL 'for loop, end loop' to assign each bit of the sigOut slice to the sigIn value.
	An example is MToWB(31 downto 16) = 16(DFrM(15)) generates
	for i in 31 downto 16 loop
	MToWB(i) <= DFrM(15);
	end loop;
	~ Can be to a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ Generate VHDL for each bit of a signal slice to n{signal} in a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ This avoids assignments such as sigA <= x"1" where e.g, sigA has been declared as std_logic_vector(31 downto 0) type.
	
	If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
	~ Use >>> pseudo code operator for shift right arithmetic operation. Requires signed functiuon input signals.
	
	Leave all labels unchanged.
	~ HDLGen-ChatGPT captures the labels for processes, concurrent statements and component instantiation.
	
	For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'
	~ Avoids ChatGPT translating a concurrent statement into a process statement
	
	Remove all assignments in if or case statements which duplicate the default assignment.
	Including null in others case statement if a default assignment is included in a case statement
	~ HDLGen-ChatGPT uses a default signal assignment approach for combinational processes. The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
	
	
	In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1. Do not add "".
	For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
	~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB));   where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
	
	Remove the '--- '  prefix from the line.
	~ logic pseudo code lines are highlighted to ChatGPT with --- prefix, for ChatGPT VHDL generation. Remove the --- after processing.
	
	Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
	~ Self explanatory
	
	For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
	~ VHDL syntax requirement
	
	Only use VHDL which is support by the IEEE VHDL-1987 standard.
	~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987
	
	Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
	~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
	
	~ ***
	In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
	~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
	~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
	
	~repeating
	For all VHDL case statements, include "when others => null;" before every occurrence of an "end case" statement.
vhdlchatgpttestbenchreset = ~
	
	The test plan table format includes
	row 1: input signal names
	row 2: output signal names
	row 3: signal radix
	row 4: column headings TestNo, delay and Note
	column 2: TestNo test number
	column 3: delay
	
	Create a single VHDL process stim_p, in a formatted code box, without any loops
	
	For each TestNo row from value 1, output the following
	TestNo value
	Comment, included in the table Note column.
	Assignment of every input signal, irrespective of its value. Do not assign any output signals. Use the signal radix format defined in table row 3
	wait for (delay  * period); statement, where delay can be integer or real, after all signal stimulus for the row have been assigned, using delay value in the delay column, with brackets () around (delay * period).
	A test of each output signal value and message, comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.
	
	Do not include a loop in the output.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements
	Do not ask me to Add more test. Please generate them all.
verilogchatgptmodelreset = ~ This ChatGPT message header is used with the HDLGen-generated HDL model template (which can include pseudo code logic descriptions) to generate the complete HDL model.
	
	Complete the following Verilog model, and output in a single formatted code box.
	
	~***Reserved for processes***
	
	~***Reserved for concurrent statements***
	
	For each line between // Title section start and // Title section end, improve formatting of the text.
	
	Do not include input or output keywords in the module declaration
	
	For each line containing the prefix '///', replace with generated Verilog code for the logic described, and remove the '///'.
	
	For each line containing '_c:' in the label, do not generate a sequential statement, do not remove the label containing '_c:', remove the '///', and remove '// Default assignment'
	
	In VERILOG processes, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
	Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
	Use for loop (format for (i=0; i<32; i=i+1) around complete array signal assignments.
	
	Leave all labels unchanged.
	Place the Verilog process line containing '// Default assignment', unchanged, and immediately before the VHDL logic generated for lines containing prefix '///'.
	Do not output the lines containing prefix '///'.
	
	
	
	
	Include <= operator in assignments.
	Make assignment bit widths compatible.
	~For assignments to each bit of a signal slice to the same single-bit signal (constant 0, 1 or a signal name, e.g, sigIn), use the following formats 1,2,3:
	~ 1 sigOut = { 16{sigIn[15]}  }
	~ 2 sigOut = { { 8{sigIn[15]} }, 8b'00000001 }
	~ 3 sigOut = { { 8{sigIn[15]} }, sigIn[7:0] }
	
	Keep all { and } characters in the generated Verilog
	Keep case assignments separate, as specified in the ChatGPT prompt.
	~For assignments which contain an assignment to a signal slice, which includes a concatenated signal bit term, e.g, 16{sigIn[15]}, include an addition set of { } brackets around this term.
	
	
	
	For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
	Remove all lines which contain default:
	
	
	=== For reference. Ignore the following lines.
	=== List of Optional ChatGPT messages, which can be submitted individually after the above ChatGPT message, if the Chat GPT output is not fully correct.
	Repeat, without outputting lines between '-- Title section start' and '-- Title section end'
verilogchatgpttestbenchreset = ~
	
	The test plan table format includes
	row 1: input signal names
	row 2: output signal names
	row 3: signal radix
	row 4: column headings TestNo, delay and Note
	column 2: TestNo test number
	column 3: delay
	
	Create a single VERILOG initial statement, in a formatted code box, without any loops
	TestNo value
	Comment, included in the table Note column.
	Assignment of every input signal, irrespective of its value. Do not assign any output signals. Use the signal radix format defined in table row 3
	"~ (delay value)" statement, where delay can be integer or real, after all signal stimulus for the row have been assigned, using delay value in the delay column, with brackets () around (delay * period), not including any character before the ~ character, and not including TestNo in the line.
	A test of each output signal value and message, comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.
	
	Do not include a loop in the output.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements
	Do not ask me to Add more test. Please generate them all.

