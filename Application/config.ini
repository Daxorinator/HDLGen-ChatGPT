[user]
author = Fearghal Morgan
email = fearghal.morgan1@gmail.com
company = University of Galway
vivado.bat = C:/Xilinx/Vivado/2019.1/bin/vivado.bat
recentenviro = C:/2023/HDLGenTop/HDLGen-ChatGPT/User_Projects/Sequential
quartus = C:/intelFPGA_lite/22.1std/quartus/bin64/quartus.exe
vhdlchatgptmodel = ~ HDLGen-ChatGPT generates the following ChatGPT prompt for VHDL model generation, which includes
	~ Notes START ===============
	~ "~" is comment line prefix
	~ HDLGen-ChatGPT generates the following HDL model generation ChatGPT prompt, which includes
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  VHDL model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   library declarations
	~   entity declaration, with input and output signals
	~   architecture
	~     signal declarations
	~     component declarations, if the design is hierarchical
	~   component instantiations, if the design is hierarchical
	~   concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	~   processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	
	~ ChatGPT does not always generate VHDL code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	
	~ New or modified prompts can be included in the ChatGPT header, using menu Generate> Edit ChatGPT Prompt Header
	~ Individual prompts (from this list, or new prompts) can be submitted as follow-on prompts.
	~ Exmples:
	~ Enter 'continue' or click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
	~ Notes END	===============
	
	Complete the following VHDL model, and output in a single formatted code box.
	
	~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements.
	~ In HDLGen-ChatGPT menu Generate> Edit ChatGPT Prompt Header, uncomment one of the following lines if you wish to output only a selected process or concurrent statement.
	~***Reserved for processes***
	~***Reserved for concurrent statements***
	
	Do not remove any comments beginning with '-- ', i.e, only two dashes
	
	For each line between -- Title section start and -- Title section end, improve the text formatting
	~  Optional prompt, to speed up the ChatGPT HDL model generation, by removing the title section generation output:
	~  Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
	
	~ Series of ChatGPT prompts
	For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
	
	For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
	~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
	~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
	~ + function supports the following overloaded operations
	~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
	~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
	~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
	~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
	~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
	~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
	~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
	~  This uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
	~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
	~ If ChatGPT generates addOut <= addin1 + addIn0;  EDA tool may highlight an error, such as 'Cannot determine exact overloaded match definition for "+"'
	~ If so, re-run the above prompt
	
	If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
	~-- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
	~-- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
	~-- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
	~-- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
	~-- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
	~-- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
	~-- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
	~-- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
	~ If using std_logic_vector signal as index, must first convert (type cast) to unsigned type, then convert to integer (TO_INTEGER function D.1) and use as integer array index
	
	Convert shift_left and shift_right function outputs to signal type std_logic_vector.
	~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify the above line.
	Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
	~ Self-explanatory
	If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
	~ Use >>> pseudo code operator for shift right arithmetic operation. Requires signed functiuon input signals.
	
	Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
	Make assignment and equality check bit widths compatible.
	
	~For assignments such as sigOut = 16{sigIn}, which describes an assignment of each bit of a 16-bit signal sigOut slice to a single-bit signal sigIn, where sigIn can be constant 0, 1 or a signal name, use a VHDL 'for loop, end loop' to assign each bit of the sigOut slice to the sigIn value.
	~An example is MToWB(31 downto 16) = 16(DFrM(15)) generates
	~for i in 31 downto 16 loop
	~MToWB(i) <= DFrM(15);
	~end loop;
	~ Can be to a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ Generate VHDL for each bit of a signal slice to n{signal} in a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ This avoids assignments such as sigA <= x"1" where e.g, sigA has been declared as std_logic_vector(31 downto 0) type.
	
	Leave all labels unchanged.
	~ HDLGen-ChatGPT captures the labels for VHDL processes, concurrent statements and component instantiation.
	
	For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'
	~ Avoids ChatGPT translating a concurrent statement into a process statement
	
	Remove all assignments in if or case statements which duplicate the default assignment.
	Including null in others case statement if a default assignment is included in a case statement
	~ HDLGen-ChatGPT uses a default signal assignment approach for combinational processes. The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
	
	In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1. Do not use double quotes "".
	For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
	~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB));   where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
	
	Remove the '--- '  prefix from the line.
	~ logic pseudo code lines are highlighted to ChatGPT with --- prefix, for ChatGPT VHDL generation. Remove the --- after processing.
	
	Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
	~ Self explanatory
	
	For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
	~ VHDL syntax requirement
	
	Only use VHDL which is support by the IEEE VHDL-1987 standard.
	~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987
	
	Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
	~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
	
	In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
	~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
	~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
	
	For all VHDL case statements, include "when others => null;" before every occurrence of an "end case" statement.
vhdlchatgpttestbench = ~
	~ "~" is comment line prefix
	The table is included at the end of the prompt.
	
	~If the table includes a TAB, output message "Table includes TABs" and stop
	~If the table does not include a TAB, continue.
	
	The format of the table is as follows
	 Row 1 includes input signal name headings 
	 Row 2 includes output signal name headings 
	 Row 3 includes signal radix 
	 Row 4 includes the following column headings 
	  Column 1: TestNo
	  Column 2: delay
	  Other:    Note 
	 Rows 5 onwards includes column values
	
	Do not include the following anywhere in the code box: "stim_p: process", "begin", "end process stim_p;".
	Do not include a VHDL signal declarations section anywhere in the code box.
	Including the following in the code box, for each TestNo row:
 	 Integer signal TestNo, using a TestNo <= assignment
	 Note column field, as a VHDL comment
	 Provide specific values for each input signal (never assigning an output signal), with the value included in the column for that input signal, not omitting any input signal name.
	 Following assignment of all input signals, include a delay statement, format 'wait for (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
	 Comparison of every output signal (not input signals) with the binary or hexadecimal value included in its corresponding output signal column, outputting a warning message (including TgestNo) if the values do not match. Do not include any input or internal signal names in the comparison statement. Ensure correct bit width in comparisons.
			
	For all input signals, ensure use of the correct values and the correct signal widths.
	Do not include any VHDL 'for' loops in the output.
	Do not include 'for testNo in ..'  or 'case TestNo ..' statements.
	Do not include any VHDL variables.
	Do not assign any output signals.
	Do not include any other delay statements.
	Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
	Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
	Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
	Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.
verilogchatgptmodel = ~ HDLGen-ChatGPT generates the following ChatGPT prompt for Verilog model generation, which includes
	~ Notes START  ===============
	~ "~" is comment line prefix
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  Verilog model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   module declaration
	~   port declarations
	~   component instantiations, if the design is hierarchical
	~   assign statements, possibly including logic pseudo code (marked with /// prefix) for ChatGPT Verilog generation
	~   always statements, possibly including logic pseudo code (marked with /// prefix) for ChatGPT Verilog generation
	
	~ ChatGPT does not always generate Verilog code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	~ Individual prompts from the list (or new prompts) can be re-submitted to ChatGPT, if the current ChatGPT output is not fully correct.
	~ Commonly used 'follow-on' prompts are highlighted using *** in this file
	~ To use, copy, remove the *** characteristics and paste into ChatGPT
	~ ***
	~ To continue, enter continue in the ChatGPT message
	~ or Click ChatGPT '> Continue generating' button, to continue, using the same code box
	~   requests ChatGPT to continue an incomplete output
	~ Notes END ===============
	
	Complete the following Verilog model, and output in a single formatted code box.
	
	~***Reserved for processes***
	
	~***Reserved for concurrent statements***
	
	For each line between // Title section start and // Title section end, improve formatting of the text.
	
	Do not include input or output keywords in the module declaration
	
	For each line containing the prefix '///', generate Verilog code describing the logic, applying the following rules, and remove the '///'.
	
	~ For each assign statement, generate a Verilog assign statement, remove '// Default assignment' if it exists.
	Do not include an initial statement for a signal, if an assign statement is included in the Verilog model template.
	
	In VERILOG initial statements, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
	Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
	~     Use for loop (format for (i=0; i<32; i=i+1) around complete array signal assignments.
	
	Leave all labels unchanged.
	In initial statements, place the Verilog line containing '// Default assignment', unchanged, and immediately before the Verilog logic generated for lines containing prefix '///'.
	
	~Include <= operator in assignments.
	Make assignment and equality check bit widths compatible.
	
	~For assignments to each bit of a signal slice to the same single-bit signal (constant 0, 1 or a signal name, e.g, sigIn), use the following formats 1,2,3:
	~ 1 sigOut = { 16{sigIn[15]}  }
	~ 2 sigOut = { { 8{sigIn[15]} }, 8b'00000001 }
	~ 3 sigOut = { { 8{sigIn[15]} }, sigIn[7:0] }
	~For assignments which contain an assignment to a signal slice, which includes a concatenated signal bit term, e.g, 16{sigIn[15]}, include an addition set of { } brackets around this term.
	
	Only use Verilog which is supported by the Verilog-1995 (IEEE Standard 1364-1995) standard.
	
	Keep all { and } characters in the generated Verilog
	
	Keep case assignments separate, as specified in the ChatGPT prompt.
	
	For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
	Remove all lines which contain default:
verilogchatgpttestbench = ~
	~ "~" is comment line prefix
	
	The table is included at the end of the prompt.
	
	~If the table includes a TAB, output message "Table includes TABs" and stop
	~If the table does not include a TAB, continue.
	
	The format of the table is as follows
	 Row 1 includes input signal name headings 
	 Row 2 includes output signal name headings 
	 Row 3 includes signal radix 
	 Row 4 includes the following column headings 
	  Column 1: TestNo
	  Column 2: delay
	  Other:    Note 
	 Rows 5 onwards includes column values
	
	Create and output a single Verilog initial stim_p, in a formatted code box, including the following, for each TestNo row:
    Include the following in the code box, for each TestNo row:
 	 Integer signal TestNo assignment
	 Note column field, as a VHDL comment
	 Provide specific values for each input signal (never assigning an output signal), with the value included in the column for that input signal, not omitting any input signal name.
	 Following assignment of all input signals, include a delay statement, format '# (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
	 Comparison of every output signal (not input signals) with the binary or hexadecimal value included in its corresponding output signal column, outputting a warning message (including TgestNo) if the values do not match. Do not include any input or internal signal names in the comparison statement. Ensure correct bit width in comparisons.
			
	For all input signals, ensure use of the correct values and the correct signal widths.
	
	For all input signals, ensure use of the correct values and the correct signal widths.
	Never include the term 0'b0.
	Do not include any Verilog loops in the output.
	Do not assign any output signals.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements.
	Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
	Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
	Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
	Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.
vhdlchatgptmodelreset = ~ HDLGen-ChatGPT generates the following ChatGPT prompt for VHDL model generation, which includes
	~ Notes START ===============
	~ "~" is comment line prefix
	~ HDLGen-ChatGPT generates the following HDL model generation ChatGPT prompt, which includes
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  VHDL model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   library declarations
	~   entity declaration, with input and output signals
	~   architecture
	~     signal declarations
	~     component declarations, if the design is hierarchical
	~   component instantiations, if the design is hierarchical
	~   concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	~   processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
	
	~ ChatGPT does not always generate VHDL code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	
	~ New or modified prompts can be included in the ChatGPT header, using menu Generate> Edit ChatGPT Prompt Header
	~ Individual prompts (from this list, or new prompts) can be submitted as follow-on prompts.
	~ Exmples:
	~ Enter 'continue' or click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
	~ Notes END	===============
	
	Complete the following VHDL model, and output in a single formatted code box.
	
	~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements.
	~ In HDLGen-ChatGPT menu Generate> Edit ChatGPT Prompt Header, uncomment one of the following lines if you wish to output only a selected process or concurrent statement.
	~***Reserved for processes***
	~***Reserved for concurrent statements***
	
	Do not remove any comments beginning with '-- ', i.e, only two dashes
	
	For each line between -- Title section start and -- Title section end, improve the text formatting
	~  Optional prompt, to speed up the ChatGPT HDL model generation, by removing the title section generation output:
	~  Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
	
	~ Series of ChatGPT prompts
	For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
	
	For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
	~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
	~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
	~ + function supports the following overloaded operations
	~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
	~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
	~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
	~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
	~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
	~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
	~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
	~  This uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
	~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
	~ If ChatGPT generates addOut <= addin1 + addIn0;  EDA tool may highlight an error, such as 'Cannot determine exact overloaded match definition for "+"'
	~ If so, re-run the above prompt
	
	If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
	~-- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
	~-- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
	~-- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
	~-- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
	~-- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
	~-- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
	~-- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
	~-- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
	~ If using std_logic_vector signal as index, must first convert (type cast) to unsigned type, then convert to integer (TO_INTEGER function D.1) and use as integer array index
	
	Convert shift_left and shift_right function outputs to signal type std_logic_vector.
	~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify the above line.
	Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
	~ Self-explanatory
	If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
	~ Use >>> pseudo code operator for shift right arithmetic operation. Requires signed functiuon input signals.
	
	Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
	Make assignment and equality check bit widths compatible.
	
	~For assignments such as sigOut = 16{sigIn}, which describes an assignment of each bit of a 16-bit signal sigOut slice to a single-bit signal sigIn, where sigIn can be constant 0, 1 or a signal name, use a VHDL 'for loop, end loop' to assign each bit of the sigOut slice to the sigIn value.
	~An example is MToWB(31 downto 16) = 16(DFrM(15)) generates
	~for i in 31 downto 16 loop
	~MToWB(i) <= DFrM(15);
	~end loop;
	~ Can be to a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ Generate VHDL for each bit of a signal slice to n{signal} in a for loop including a repeated single bit value concatentation, i.e, = n{signal} to = signal & signal & signal & signal, e.g, 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) & DFrM(15) & DFrM(15) & DFrM(15).
	~ This avoids assignments such as sigA <= x"1" where e.g, sigA has been declared as std_logic_vector(31 downto 0) type.
	
	Leave all labels unchanged.
	~ HDLGen-ChatGPT captures the labels for VHDL processes, concurrent statements and component instantiation.
	
	For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'
	~ Avoids ChatGPT translating a concurrent statement into a process statement
	
	Remove all assignments in if or case statements which duplicate the default assignment.
	Including null in others case statement if a default assignment is included in a case statement
	~ HDLGen-ChatGPT uses a default signal assignment approach for combinational processes. The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
	
	In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1. Do not use double quotes "".
	For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
	~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB));   where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
	
	Remove the '--- '  prefix from the line.
	~ logic pseudo code lines are highlighted to ChatGPT with --- prefix, for ChatGPT VHDL generation. Remove the --- after processing.
	
	Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
	~ Self explanatory
	
	For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
	~ VHDL syntax requirement
	
	Only use VHDL which is support by the IEEE VHDL-1987 standard.
	~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987
	
	Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
	~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
	
	In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
	~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
	~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
	
	For all VHDL case statements, include "when others => null;" before every occurrence of an "end case" statement.
vhdlchatgpttestbenchreset = ~
	~ "~" is comment line prefix
	The table is included at the end of the prompt.
	
	~If the table includes a TAB, output message "Table includes TABs" and stop
	~If the table does not include a TAB, continue.
	
	The format of the table is as follows
	 Row 1 includes input signal name headings 
	 Row 2 includes output signal name headings 
	 Row 3 includes signal radix 
	 Row 4 includes the following column headings 
	  Column 1: TestNo
	  Column 2: delay
	  Other:    Note 
	 Rows 5 onwards includes column values
	
	Output a single VHDL process stim_p, in a formatted code box.
	Do not include the following anywhere in the code box: "stim_p: process", "begin", "end process stim_p;".
	Including the following in the code box, for each TestNo row:
 	 Integer signal TestNo, using a TestNo <= assignment
	 Note column field, as a VHDL comment
	 Provide specific values for each input signal (never assigning an output signal), with the value included in the column for that input signal, not omitting any input signal name.
	 Following assignment of all input signals, include a delay statement, format 'wait for (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
	 Comparison of every output signal (not input signals) with the binary or hexadecimal value included in its corresponding output signal column, outputting a warning message (including TgestNo) if the values do not match. Do not include any input or internal signal names in the comparison statement. Ensure correct bit width in comparisons.
			
	For all input signals, ensure use of the correct values and the correct signal widths.
	Do not include any VHDL 'for' loops in the output.
	Do not include 'for testNo in ..'  or 'case TestNo ..' statements.
	Do not include any VHDL variables.
	Do not assign any output signals.
	Do not include any other delay statements.
	Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
	Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
	Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
	Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.
verilogchatgptmodelreset = ~ HDLGen-ChatGPT generates the following ChatGPT prompt for Verilog model generation, which includes
	~ Notes START  ===============
	~ "~" is comment line prefix
	~  ChatGPT prompt header, including a series of ChatGPT prompts
	~  Verilog model template, generated by HDLGen-ChatGPT, including
	~   title section
	~   module declaration
	~   port declarations
	~   component instantiations, if the design is hierarchical
	~   assign statements, possibly including logic pseudo code (marked with /// prefix) for ChatGPT Verilog generation
	~   always statements, possibly including logic pseudo code (marked with /// prefix) for ChatGPT Verilog generation
	
	~ ChatGPT does not always generate Verilog code as expected.
	~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.
	~ The ChatGPT prompt series has been developed through testing on a series of combinational, sequential and hierarchical designs
	~ Individual prompts from the list (or new prompts) can be re-submitted to ChatGPT, if the current ChatGPT output is not fully correct.
	~ Commonly used 'follow-on' prompts are highlighted using *** in this file
	~ To use, copy, remove the *** characteristics and paste into ChatGPT
	~ ***
	~ To continue, enter continue in the ChatGPT message
	~ or Click ChatGPT '> Continue generating' button, to continue, using the same code box
	~   requests ChatGPT to continue an incomplete output
	~ Notes END ===============
	
	Complete the following Verilog model, and output in a single formatted code box.
	
	~***Reserved for processes***
	
	~***Reserved for concurrent statements***
	
	For each line between // Title section start and // Title section end, improve formatting of the text.
	
	Do not include input or output keywords in the module declaration
	
	For each line containing the prefix '///', generate Verilog code describing the logic, applying the following rules, and remove the '///'.
	
	~ For each assign statement, generate a Verilog assign statement, remove '// Default assignment' if it exists.
	Do not include an initial statement for a signal, if an assign statement is included in the Verilog model template.
	
	In VERILOG initial statements, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
	Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
	~     Use for loop (format for (i=0; i<32; i=i+1) around complete array signal assignments.
	
	Leave all labels unchanged.
	In initial statements, place the Verilog line containing '// Default assignment', unchanged, and immediately before the Verilog logic generated for lines containing prefix '///'.
	
	~Include <= operator in assignments.
	Make assignment and equality check bit widths compatible.
	
	~For assignments to each bit of a signal slice to the same single-bit signal (constant 0, 1 or a signal name, e.g, sigIn), use the following formats 1,2,3:
	~ 1 sigOut = { 16{sigIn[15]}  }
	~ 2 sigOut = { { 8{sigIn[15]} }, 8b'00000001 }
	~ 3 sigOut = { { 8{sigIn[15]} }, sigIn[7:0] }
	~For assignments which contain an assignment to a signal slice, which includes a concatenated signal bit term, e.g, 16{sigIn[15]}, include an addition set of { } brackets around this term.
	
	Only use Verilog which is supported by the Verilog-1995 (IEEE Standard 1364-1995) standard.
	
	Keep all { and } characters in the generated Verilog
	
	Keep case assignments separate, as specified in the ChatGPT prompt.
	
	For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
	Remove all lines which contain default:
verilogchatgpttestbenchreset = ~
	~ "~" is comment line prefix
	
	The table is included at the end of the prompt.
	
	~If the table includes a TAB, output message "Table includes TABs" and stop
	~If the table does not include a TAB, continue.
	
	The format of the table is as follows
	 Row 1 includes input signal name headings 
	 Row 2 includes output signal name headings 
	 Row 3 includes signal radix 
	 Row 4 includes the following column headings 
	  Column 1: TestNo
	  Column 2: delay
	  Other:    Note 
	 Rows 5 onwards includes column values
	
	Create and output a single Verilog initial stim_p, in a formatted code box, including the following, for each TestNo row:
    Include the following in the code box, for each TestNo row:
 	 Integer signal TestNo assignment
	 Note column field, as a VHDL comment
	 Provide specific values for each input signal (never assigning an output signal), with the value included in the column for that input signal, not omitting any input signal name.
	 Following assignment of all input signals, include a delay statement, format '# (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
	 Comparison of every output signal (not input signals) with the binary or hexadecimal value included in its corresponding output signal column, outputting a warning message (including TgestNo) if the values do not match. Do not include any input or internal signal names in the comparison statement. Ensure correct bit width in comparisons.
			
	For all input signals, ensure use of the correct values from the associated input signal columns and ensure the correct signal widths.

	Never include the term 0'b0.
	Do not include any Verilog loops in the output.
	Do not assign any output signals.
	Do not include 'case TestNo' in the output.
	Do not include any other delay statements.
	Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
	Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
	Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
	Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.



	

