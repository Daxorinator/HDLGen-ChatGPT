// Header Section
// VHDL testbench singleShot_TB
// Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
// Reference: https://tinyurl.com/vicilogicVHDLTips 
// Component Name : singleShot
// Title          : To be Completed
// Description    : refer to component hdl model fro function description and signal dictionary
// Author(s)      : Fearghal Morgan
// Company        : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 28/03/2023

module singleShot_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simulation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg sw;
wire aShot;

localparam period = 20;        // 20 ns
localparam OneFifthPeriod = 4; // 4 ns

initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

singleShot uut
	(
	.clk (clk), 
	.rst (rst), 
	.sw (sw), 
	.aShot (aShot)
	);

initial
begin
 $timeformat(-9, 2, " ns", 20);
 $display("Simulation start :: time is %0t",$time);
 
 // Apply default input signal values. Do not assign output signals (generated by the UUT) here
 // Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
 testNo = 0; 
 rst = 1'b0;
 sw = 1'b0;
 
 $display("Assert and toggle rst",$time);
 rst = 1'b1;
 #period 
 #OneFifthPeriod 
 rst = 1'b0;
 #period 

 // Include testbench stimulus sequence here, i.e, input signal combinations and intervals (wait for n*period) 
 // Use new testNo for each test set, to aid locating test on simulation waveform
 testNo = 1;
 sw = 1'b1;
 repeat (2) 
  #period 
 sw = 1'b0;
 repeat (2) 
  #period 

 testNo = 2; // back to back sw assertions
 sw = 1'b1;
 #period 
 sw = 1'b0;
 #period 
 sw = 1'b1;
 #period 
 sw = 1'b0;
 #period 
	
 testNo = 3; // aShot should no assert if sw asserted on rst
 rst = 1'b1;
 sw = 1'b1;
 repeat (2) 
  #period 
 rst = 1'b0;
 sw = 1'b0;
 repeat (2) 
  #period 
 sw = 1'b1;
 repeat (2) 
  #period 
 sw = 1'b0;
 #period 

 // Print picosecond (ps) = 1000*ns (nanosecond) time to simulation transcript
 // Use to find time when simulation ends (endOfSim is TRUE)
 // Re-run the simulation for this time 
 // Select timing diagram and use View>Zoom Fit  
 $display("Simulation end :: time is %0t",$time);
 endOfSim = 1'b1; // assert to stop clk signal generation
end 
endmodule