-- Header Section
-- VHDL testbench singleShot_TB
-- Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
-- <FM> Reference: https://tinyurl.com/VHDLTips
-- <FM line space>
-- Component Name : singleShot
-- Title          : To be Completed
-- Description    : refer to component hdl model fro function description and signal dictionary
-- Author(s)      : Fearghal Morgan
-- Company        : University of Galway
-- Email          : fearghal.morgan@universityofgalway.ie
-- Date           : 28/03/2023

-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- Testbench entity declaration. No inputs or outputs
entity singleShot_TB is end entity singleShot_TB;

architecture behave of singleShot_TB is

-- Include component declaration in package

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

signal clk: std_logic := '1'; -- entity includes signal clk, so declare (and initialise) tetbench clk signal
signal rst: std_logic;        -- entity may include signal rst (reset), so declare in testbench

signal sw : std_logic;
signal aShot : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

clkStim: clk <= not clk after period/2 when endOfSim = false else '0';

-- instantiate unit under test (UUT)
UUT: singleShot-- map component internal sigs => testbench signals
port map
	(
	clk => clk, 
	rst => rst, 
	sw => sw, 
	aShot => aShot
	);

-- Signal stimulus process
stim_p: process -- process sensitivity list is empty, so process automatically executes at start of simulation. Suspend process at the wait; statement
begin
    report "%N Simulation start, time = " & time'image(now);

	-- Apply default INPUT signal values. Do not assign output signals (generated by the UUT) in this stim_p process
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is
	-- std_logic, use '0'
	-- std_logic_vector use (others => '0')
	-- std_logic_vector array use (others => (others => '0'))
	-- integer use 0

	rst <= '0'; -- assign default input signals
	sw  <= '0';

	report "Assert and toggle rst";
	testNo <= 0;
	rst    <= '1';
	wait for period*1.2; -- assert rst for 1.2*period, deasserting rst 0.2*period after active clk edge
	rst   <= '0';
	wait for period; -- wait 1 clock period

-- manually added code START
    -- include testbench stimulus sequence here. Use new testNo for each test set
    -- individual tests. Generate input signal combinations and wait for period.
    testNo <= 1;
    sw <= '1';
    wait for 2*period;	    
    sw <= '0';
    wait for 2*period;	    
	
    testNo <= 2; -- back to back sw assertions
    sw <= '1';
    wait for period;	    
    sw <= '0';
    wait for period;	    
    sw <= '1';
    wait for period;	    
    sw <= '0';
    wait for period;	    

    testNo <= 3; -- aShot should no assert if sw asserted on rst
	rst    <= '1';
    sw <= '1';
    wait for 2*period;
	rst    <= '0';
    sw <= '0';
    wait for 2*period;
    sw <= '1';
    wait for 2*period;
    sw <= '0';
    wait for period;
-- manually added code END

    -- Print picosecond (ps) = 1000*ns (nanosecond) time to simulation transcript
    -- Use to find time when simulation ends (endOfSim is TRUE)
    -- Re-run the simulation for this time
    -- Select timing diagram and use View>Zoom Fit
    report "%N Simulation end, time = " & time'image(now);
	endOfSim <= TRUE; -- assert flag to stop clk signal generation

	wait; -- wait forever
end process; 
end behave;