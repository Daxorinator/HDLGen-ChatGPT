// Header Section
// VHDL testbench threshold_TB
// Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
// Reference: https://tinyurl.com/vicilogicVHDLTips 
// Component Name : threshold
// Title          : Generate a 32-x32-bit threshold array from 32x32-byte source (BRAM) data array
// Description    : refer to component hdl model fro function description and signal dictionary
// Author(s)      : Fearghal Morgan
// Company        : University of Galway
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 03/04/2023

module threshold_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module
reg clk;
reg rst;

reg ce;
reg go;
reg reg4x32_CSRA;
reg reg4x32_CSRB;
reg BRAM_dOut;
wire active;
wire wr;
wire add;
wire datToMem;
wire functBus;

parameter  period = 20; // 20 ns

initial clk = 1'b1;
initial endOfSim = 1'b0;
 
// Generate clk signal, if sequential component, and endOfSim is 0.
always # (period/2.0) if (~endOfSim) clk = ~ clk;

threshold UUT
	(
	.ce (ce), 
	.go (go), 
	.reg4x32_CSRA (reg4x32_CSRA), 
	.reg4x32_CSRB (reg4x32_CSRB), 
	.BRAM_dOut (BRAM_dOut), 
	.active (active), 
	.wr (wr), 
	.add (add), 
	.datToMem (datToMem), 
	.functBus (functBus), 
	.clk (clk), 
	.rst (rst)
	);

initial
begin
	// Apply default INPUT signal values. Do not assign output signals (generated by the UUT) here
	// Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	testNo <= 0;
	ce = 1'b0;
	go = 1'b0;
	reg4x32_CSRA <= (others =>(others => '0'));
	reg4x32_CSRB <= (others =>(others => '0'));
	BRAM_dOut = 31'b0;
	rst    <= 1'b1;
	@(posedge clk);
	rst   <= 1'b0;
	repeat (2)
	@(posedge clk);
	// include testbench stimulus sequence here, i.e, input signal combinations and intervals (wait for n*period)
	// Use new testNo for each test set, to aid locating test on simualtion waveform
	testNo <= 1;

	// include testbench stimulus sequence here. Use new testNo for each test set
// manually added code START
// manually added code END

	endOfSim = 1'b1; // assert to stop clk signal generation

end
endmodule