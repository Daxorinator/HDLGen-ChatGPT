// Header Section
// VHDL testbench mux21_4_TB
// Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
// Reference: https://tinyurl.com/vicilogicVHDLTips 
// Component Name : mux21_4
// Title          : mux21_4 title
// Description    : refer to component hdl model fro function description and signal dictionary
// Author(s)      : Fearghal Morgan
// Company        : UG
// Email          : fearghal.morgan@universityofgalway.ie
// Date           : 27/03/2023

module mux21_4_TB();

// testbench signal declarations
integer testNo; // aids locating test in simulation waveform
reg endOfSim; // assert at end of simulation to highlight simuation done. Stops clk signal generation.

// Typically use the same signal names as in the Verilog module

reg [3:0] mux21_4_In1;
reg [3:0] mux21_4_In0;
reg sel;
wire [3:0] mux21_4_Out;

parameter  period = 20; // 20 ns

initial endOfSim = 1'b0;
 
mux21_4 uut
	(
	.mux21_4_In1 (mux21_4_In1), 
	.mux21_4_In0 (mux21_4_In0), 
	.sel (sel), 
	.mux21_4_Out (mux21_4_Out)
	);

initial
begin
    $timeformat(-9, 2, " ns", 20);
    $display("Simulation start :: time is %0t",$time);
    
	// Apply default INPUT signal values. Do not assign output signals (generated by the UUT) here
	// Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	testNo <= 0;
	sel = 1'b0;	
	mux21_4_In1 = 4'b0;
	mux21_4_In0 = 4'b0;
	repeat (1)
	 #20

	// include testbench stimulus sequence here. Use new testNo for each test set
	// Use new testNo for each test set, to aid locating test on simualtion waveform
// manually added code START
	testNo <= 1;
	sel = 1'b0;
	mux21_4_In1 = 4'b0011;
	mux21_4_In0 = 4'hf;
	repeat (1)
	 #20

	testNo <= 2;
	sel = 1'b1;
	repeat (1)
	 #20
// manually added code END

    // Print picosecond (ps) = 1000*ns (nanosecond) time to simulation transcript
    // Use to find time when simulation ends (endOfSim is TRUE)
    // Re-run the simulation for this time 
    // Select timing diagram and use View>Zoom Fit  $display("Simulation end :: time is %0t",$time);
    $display("Simulation end :: time is %0t",$time);
	endOfSim = 1'b1; // assert to stop clk signal generation

end
endmodule