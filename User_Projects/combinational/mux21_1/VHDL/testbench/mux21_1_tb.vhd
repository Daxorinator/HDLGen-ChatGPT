-- Header Section
-- VHDL testbench mux21_1_TB
-- Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
-- Reference: https://tinyurl.com/VHDLTips

-- Component Name : mux21_1
-- Title          : 2-to-1 mux, 1-bit data
-- Description    : refer to component hdl model fro function description and signal dictionary
-- Author(s)      : Fearghal Morgan
-- Company        : University of Galway
-- Email          : fearghal.morgan@universityofgalway.ie
-- Date           : 31/03/2023

-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- Testbench entity declaration. No inputs or outputs
entity mux21_1_TB is end entity mux21_1_TB;

architecture behave of mux21_1_TB is

-- Include component declaration in package

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

-- Typically use the same signal names as in the VHDL entity, with keyword signal added, and without in/out mode keyword
signal sel : std_logic;
signal muxIn1 : std_logic;
signal muxIn0 : std_logic;
signal muxOut : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

-- instantiate unit under test (UUT)
UUT: mux21_1-- map component internal sigs => testbench signals
port map
	(
	sel => sel, 
	muxIn1 => muxIn1, 
	muxIn0 => muxIn0, 
	muxOut => muxOut
	);

-- Signal stimulus process
stim_p: process -- process sensitivity list is empty, so process automatically executes at start of simulation. Suspend process at the wait; statement
variable stimVec : std_logic_vector(2 downto 0);
begin

    report "%N Simulation start, time = " & time'image(now);

	-- Apply default INPUT signal values. Do not assign output signals (generated by the UUT) in this stim_p process
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is
	-- std_logic, use '0'
	-- std_logic_vector use (others => '0')
    -- std_logic_vector array use (others => (others => '0'))
	-- integer use 0

    -- Apply default input signal values. Do not assign output signals (generated by the UUT) here
    -- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	sel <= '0';
	muxIn1 <= '0';
	muxIn0 <= '0';

-- manually added code START
    -- include testbench stimulus sequence here. Use new testNo for each test set
    -- individual tests. Generate input signal combinations and wait for period.
    testNo <= 1;
    wait for 2*period;

	for i in 0 to 7 loop
		stimVec := std_logic_vector( to_unsigned(i,3) );
		sel <= stimVec(2);
		muxIn1 <= stimVec(1);
		muxIn0 <= stimVec(0);
		wait for period;
	end loop;
-- manually added code END

    -- Print picosecond (ps) = 1000*ns (nanosecond) time to simulation transcript
    -- Use to find time when simulation ends (endOfSim is TRUE)
    -- Re-run the simulation for this time
    -- Select timing diagram and use View>Zoom Fit
    report "%N Simulation end, time = " & time'image(now);
	endOfSim <= TRUE; -- assert flag to stop clk signal generation

	wait; -- wait forever
end process; 
end behave;