-- Header Section
-- VHDL testbench memorySys_TB
-- Generated by HDLGen, Github https://github.com/abishek-bupathi/HDLGen
-- Reference: https://tinyurl.com/vicilogicVHDLTips 
-- Component Name : memorySys
-- Title          : 2 x 4-digit memory array write/read and bank select mux
-- Description    : refer to component hdl model fro function description and signal dictionary
-- Author(s)      : Fearghal Morgan
-- Company        : University of Galway
-- Email          : fearghal.morgan@universityofgalway.ie
-- Date           : 02/04/2023

-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- entity declaration
entity memorySys_TB is end entity memorySys_TB;

architecture behave of memorySys_TB is

-- unit under test (UUT) component declaration. Identical to component entity, with 'entity' replaced with 'component'
component memorySys is 
Port(
	clk : in std_logic;
	rst : in std_logic;
	selMemBankToBeWritten : in std_logic;
	we : in std_logic;
	add : in std_logic_vector(1 downto 0);
	dIn : in std_logic_vector(3 downto 0);
	dOut : out std_logic_vector(3 downto 0);
	ce : in std_logic;
	selMemBankToBeRead : in std_logic 
	);
end component;

-- testbench signal declarations
signal testNo: integer; -- aids locating test in simulation waveform
signal endOfSim : boolean := false; -- assert at end of simulation to highlight simuation done. Stops clk signal generation.

-- Typically use the same signal names as in the VHDL entity, with keyword signal added, and without in/out mode keyword

signal clk: std_logic := '1';
signal rst: std_logic;        

signal selMemBankToBeWritten : std_logic;
signal we : std_logic;
signal add : std_logic_vector(1 downto 0);
signal dIn : std_logic_vector(3 downto 0);
signal dOut : std_logic_vector(3 downto 0);
signal ce : std_logic;
signal selMemBankToBeRead : std_logic;

constant period: time := 20 ns; -- Default simulation time. Use as simulation delay constant, or clk period if sequential model ((50MHz clk here)
 
begin

-- Generate clk signal, if sequential component, and endOfSim is FALSE.
clkStim: clk <= not clk after period/2 when endOfSim = false else '0';

-- instantiate unit under test (UUT)
UUT: memorySys-- map component internal sigs => testbench signals
port map
	(
	clk => clk, 
	rst => rst, 
	selMemBankToBeWritten => selMemBankToBeWritten, 
	we => we, 
	add => add, 
	dIn => dIn, 
	dOut => dOut, 
	ce => ce, 
	selMemBankToBeRead => selMemBankToBeRead
	);

-- Signal stimulus process
stim_p: process -- process sensitivity list is empty, so process automatically executes at start of simulation. Suspend process at the wait; statement
begin
	-- Apply default INPUT signal values. Do not assign output signals (generated by the UUT) in this stim_p process
	-- Each stimulus signal change occurs 0.2*period after the active low-to-high clk edge
	-- if signal type is
	-- std_logic, use '0'
	-- std_logic_vector use (others => '0')
	-- integer use 0
	selMemBankToBeWritten <= '0';
	we <= '0';
	add <= (others => '0');
	dIn <= (others => '0');
	ce <= '0';
	selMemBankToBeRead <= '0';
	report "%N Simulation start";

	report "Assert and toggle rst";
	testNo <= 0;
	rst    <= '1';
	wait for period*1.2; -- assert rst for 1.2*period, deasserting rst 0.2*period after active clk edge
	rst   <= '0';
	wait for period; -- wait 1 clock period
	-- include testbench stimulus sequence here. USe new testNo for each test set	-- individual tests. Generate input signal combinations and wait for period.
	testNo <= 1;
	wait for 3*period;

	-- include testbench stimulus sequence here. Use new testNo for each test set
-- manually added code START
-- manually added code END

	report "%N Simulation done";
	endOfSim <= TRUE; -- assert flag to stop clk signal generation

	wait; -- wait forever
end process; 
end behave;