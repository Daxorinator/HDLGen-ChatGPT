<?xml version="1.0" ?>
<HDLGen>
	<genFolder>
		<vhdl_folder>RISCV_RB/VHDL/model</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/testbench</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/ChatGPT</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/ChatGPT/Backups</vhdl_folder>
		<vhdl_folder>RISCV_RB/VHDL/AMDprj</vhdl_folder>
	</genFolder>
	<projectManager>
		<settings>
			<name>RISCV_RB</name>
			<environment>C:/Users/User/HDLGen/Sample_Projects</environment>
			<location>C:/Users/User/HDLGen/Sample_Projects/RISCV_V1</location>
			<info>None</info>
		</settings>
		<EDA>
			<tool>
				<name>Xilinx Vivado</name>
				<dir>C:/Xilinx/Vivado/2019.1/bin/vivado.bat</dir>
				<version>2019.1</version>
			</tool>
		</EDA>
		<HDL>
			<language>
				<name>VHDL</name>
			</language>
		</HDL>
	</projectManager>
	<hdlDesign>
		<header>
			<compName>RISCV_RB</compName>
			<title>32 x 32-bit Register Bank, with chip enable. Single synchronous write port, dual combinational read ports</title>
			<description>if rst asserted&amp;#44; high  &amp;#10;  x(31:0)(31:0) = 0        immediately clear all registers&amp;#10;else if rising_edge (clk) &amp;#10;  if ce = 1    &amp;#10;    if RWr = 1  &amp;#10;      if rd  &amp;gt; 0  &amp;#10;        x(rd) = WBDat      synchronous write&amp;#10;&amp;#10;readReg dual combinational read ports&amp;#10;rs1D = x(rs1)&amp;#10;rs2D = x(rs2)</description>
			<authors>Fearghal Morgan</authors>
			<company>University of Galway</company>
			<email>fearghal.morgan@universityofgalway.ie</email>
			<date>02/09/2023</date>
		</header>
		<clkAndRst/>
		<entityIOPorts>
			<signal>
				<name>RWr</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>Synchronous register write enable, high asserted</description>
			</signal>
			<signal>
				<name>rd</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Destination register address, address 0 - 31</description>
			</signal>
			<signal>
				<name>rs1</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Source register 1 address</description>
			</signal>
			<signal>
				<name>rs2</name>
				<mode>in</mode>
				<type>bus(4 downto 0)</type>
				<description>Source register 2 address</description>
			</signal>
			<signal>
				<name>rs1D</name>
				<mode>out</mode>
				<type>bus(31 downto 0)</type>
				<description>Source register 1 data</description>
			</signal>
			<signal>
				<name>rs2D</name>
				<mode>out</mode>
				<type>bus(31 downto 0)</type>
				<description>Source register 2 data</description>
			</signal>
			<signal>
				<name>WBDat</name>
				<mode>in</mode>
				<type>bus(31 downto 0)</type>
				<description>Writeback data</description>
			</signal>
			<signal>
				<name>ce</name>
				<mode>in</mode>
				<type>single bit</type>
				<description>Chip enable, asserted high</description>
			</signal>
		</entityIOPorts>
		<internalSignals>
			<signal>
				<name>NSArray</name>
				<type>array,array32x32</type>
				<description>Register array next state signal</description>
			</signal>
			<signal>
				<name>CSArray</name>
				<type>array,array32x32</type>
				<description>Register array current state signal</description>
			</signal>
		</internalSignals>
		<architecture>
			<archName>Combinational</archName>
			<process>
				<label>NSDecode_p</label>
				<inputSignal>RWr</inputSignal>
				<inputSignal>rd</inputSignal>
				<inputSignal>WBDat</inputSignal>
				<inputSignal>CSArray</inputSignal>
				<defaultOutput>NSArray,CSArray</defaultOutput>
				<note>if RWr = 1&amp;#10;   if rd &amp;gt; 0&amp;#10;      NSArray(rd) = WBDat&amp;#10;  end if&amp;#10;end if</note>
			</process>
			<process>
				<label>stateReg_p</label>
				<inputSignal>clk</inputSignal>
				<inputSignal>rst</inputSignal>
				<defaultOutput>CSArray,zero,NSArray,ce</defaultOutput>
				<note>None</note>
			</process>
			<concurrentStmt>
				<label>rs1D_c</label>
				<statement>rs1D,zero</statement>
				<note>CSArray(rs1)</note>
			</concurrentStmt>
			<concurrentStmt>
				<label>rs2D_c</label>
				<statement>rs2D,zero</statement>
				<note>CSArray(rs2)</note>
			</concurrentStmt>
		</architecture>
		<testbench>
			<TBNote>1      1     1   1   00100 deadbeef 00100 00100 deadbeef deadbeef Write RB(4)&amp;#44;        &amp;#10;Read RB(4) on rs1D       and rs2D&amp;#10;        2      1     1   1   00101 c001cafe 00100 00101 deadbeef c001cafe Write RB(5)&amp;#44;        &amp;#10;Read RB(4) on rs1D       and RB(5) on rs2D)&amp;#10;        3      1     1   1   00110 f00dcafe 00110 00100 f00dcafe deadbeef Write RB(6)&amp;#44;        &amp;#10;Read RB(6) on rs1D       and RB(4) on rs2D&amp;#10;        4      0.1   1   1   00110 a5a5a5a5 00110 00101 f00dcafe c001cafe No write &amp;#10;until clk&amp;#44; Read RB(6) on rs1D and RB(5) on rs2D&amp;#10;        5      0.9   1   1   00110 a5a5a5a5 00110 00101 a5a5a5a5 c001cafe Write &amp;#10;RB(6) on clk&amp;#44; Read RB(6) on rs1D       and RB(5) on rs2D&amp;#10;        6      3     1   1   11111 3c3c3c3c 11111 00110 3c3c3c3c a5a5a5a5 Write &amp;#10;RB(31)&amp;#44;       Read RB(31) on rs1D      and RB(6) on rs2D&amp;#10;        7      3     1   1   00000 5a5a5a5a 11111 00000 3c3c3c3c 00000000 Write &amp;#10;RB(0)&amp;#44;        Read RB(31) on rs1D      and RB(0)=0 on rs2D (write 0x5a5a5a5a to x0 &amp;#10;does not occur)&amp;#10;        8      1     0   1   00100 c001100c 00100 11111 deadbeef 3c3c3c3c Write/read &amp;#10;RB(4)&amp;#44; with ce deasserted. Read RB(4) on rs1D and RB(31) on rs2D&amp;#10;        9      1     1   1   00100 c001100c 00100 00100 c001100c c001100c Write &amp;#10;RB(4)&amp;#44;        Read RB(4) on rs1D and rs2D&amp;#10;        10     1     1   0   00110 ffffffff 00110 00110 a5a5a5a5 a5a5a5a5 Write RB(6)&amp;#44; &amp;#10;with RWr deasserted. Read RB(6)on rs1D and rs2D&amp;#10;        11     1     1   1   00001 ffffffff 00001 00001 ffffffff ffffffff Write RB(1)&amp;#44;        Read &amp;#10;RB(1)on rs1D and rs2D</TBNote>
		</testbench>
		<chatgpt>
			<commands>
				<VHDLModel>~ HDLGen-ChatGPT generates the following HDL model generation ChatGPT prompt&amp;#44; which includes&amp;#10;~  ChatGPT prompt header&amp;#44; including a series of ChatGPT prompts&amp;#10;~  HDL model template&amp;#44; generated by HDLGen-ChatGPT&amp;#44; including&amp;#10;~   title section&amp;#10;~   library declarations&amp;#10;~   entity declaration&amp;#10;~   architecture&amp;#10;~     signal declarations&amp;#10;~     component declarations&amp;#44; if hierarchical model&amp;#10;~   component instantiations&amp;#44; if hierarchical design&amp;#10;~   concurrent statements&amp;#44; possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;~   processes&amp;#44; possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation&amp;#10;&amp;#10;~ ChatGPT does not always generate VHDL code as expected.&amp;#10;~ The prompts included here avoid some of the HDL generation issues which ChatGPT has exhibited during project development. Each prompt has an accompanying explanation.&amp;#10;~ The ChatGPT prompt series has been developed through testing on a series of combinational&amp;#44; sequential and hierarchical designs&amp;#10;&amp;#10;~ Individual prompts from the list (or new prompts) can be re-submitted to ChatGPT&amp;#44; if the current ChatGPT output is not fully correct.&amp;#10;~ Commonly used &amp;apos;follow-on&amp;apos; prompts are highlighted using *** in this file&amp;#10;~ To use&amp;#44; copy&amp;#44; remove *** and paste into ChatGPT&amp;#10;~ ***&amp;#10;~  continue&amp;#10;~ Click ChatGPT &amp;apos;&amp;gt; Continue generating&amp;apos; button&amp;#44; to continue&amp;#44; using the same code box&amp;#10;~   requests ChatGPT to continue an incomplete output&amp;#10;~ To target an update to code within a specific process (faster than applying to the complete HDL model)&amp;#44; add the prefix&amp;#10;~  For process &amp;lt;processName&amp;gt;&amp;#44;&amp;#10;~ or&amp;#10;~ Output the architecture only&amp;#44; including null in others case statement if a default assignment is included in a case statement&amp;#10;&amp;#10;Complete the following VHDL model&amp;#44; and output in a single formatted code box.&amp;#10;~ Generate the complete VHDL model in a single code box&amp;#44; using the HDL model generation ChatGPT prompt&amp;#10;&amp;#10;Do not remove any comments beginning with &amp;apos;-- &amp;apos;&amp;#44; i.e&amp;#44; only two dashes&amp;#10;&amp;#10;For each line between -- Title section start and -- Title section end&amp;#44; improve the text formatting&amp;#10;~ HDLGen-ChatGPT generates the HDL model title section from text captured by the user. Improve the title section text formatting.&amp;#10;~ ***&amp;#10;~  Do not include the code between and including lines &amp;apos;-- Title Section Start&amp;apos; and &amp;apos;-- Title Section End&amp;apos;.&amp;#10;~  Optional prompt&amp;#44; to speed up the ChatGPT HDL model generation&amp;#44; by removing the title section generation output&amp;#10;&amp;#10;~ Series of ChatGPT prompts&amp;#10;For each line containing the prefix &amp;apos;--- &amp;apos;&amp;#44; generate VHDL code describing the logic&amp;#44; applying the following rules&amp;#10;~ ***&amp;#10;For arithmetic operations&amp;#44; use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.&amp;#10;~ Arithmetic operations are supported by the IEEE.numeric_std library&amp;#44; https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd&amp;#10;~ e.g&amp;#44; operations such as + (addition) often require input signal type conversion to support the overloaded operator functions&amp;#44;&amp;#10;~ + function supports the following overloaded operations&amp;#10;~ -- Id: A.3  function &amp;quot;+&amp;quot; ( L&amp;#44;R: UNSIGNED)           return UNSIGNED&amp;#10;~ -- Id: A.4  function &amp;quot;+&amp;quot; ( L&amp;#44;R: SIGNED)             return SIGNED;&amp;#10;~ -- Id: A.5  function &amp;quot;+&amp;quot; ( L: UNSIGNED; R: NATURAL) return UNSIGNED;&amp;#10;~ -- Id: A.6  function &amp;quot;+&amp;quot; ( L: NATURAL; R: UNSIGNED) return UNSIGNED;&amp;#10;~ -- Id: A.7  function &amp;quot;+&amp;quot; ( L: INTEGER; R: SIGNED)   return SIGNED;&amp;#10;~ -- Id: A.8  function &amp;quot;+&amp;quot; ( L: SIGNED; R: INTEGER)   return SIGNED;&amp;#10;~ Example: addOut &amp;lt;= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );&amp;#10;~  This uses A.3 function &amp;quot;+&amp;quot; ( L&amp;#44;R: UNSIGNED) return UNSIGNED&amp;#10;~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type&amp;#44; perform +&amp;#44; and then type cast the unsigned result to std_logic_vector type&amp;#10;~ If ChatGPT generates addOut &amp;lt;= addin1 + addIn0;  EDA tool may highlight an error&amp;#44; such as &amp;apos;Cannot determine exact overloaded match definition for &amp;quot;+&amp;quot;&amp;apos;&amp;#10;~ If so&amp;#44; re-run the above prompt&amp;#10;&amp;#10;&amp;#10;If a line includes a std_logic_vector signal as an array index&amp;#44; convert the signal to an integer index using &amp;quot;ieee.numeric_std&amp;quot; package to_integer(unsigned()).&amp;#10;~-- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;&amp;#10;~-- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;&amp;#10;~-- Id: D.3  function TO_UNSIGNED (  ARG&amp;#44;SIZE: NATURAL) return UNSIGNED;&amp;#10;~-- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;&amp;#10;~-- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;&amp;#10;~-- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;&amp;#10;~-- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;&amp;#10;~-- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;&amp;#10;~ If using std_logic_vector signal as index&amp;#44; must first convert (type cast) to unsigned type&amp;#44; then convert to integer (TO_INTEGER function D.1) and use as integer array index&amp;#10;&amp;#10;Convert shift_left and shift_right function outputs to signal type std_logic_vector.&amp;#10;~ This assumes that the target signal type is std_logic_vector. If not so&amp;#44; remove or modify this line.&amp;#10;&amp;#10;Only use ieee.numeric_std package shift_left or shift_right functions&amp;#44; and do not use sra&amp;#44; srl&amp;#44; sll&amp;#44; shift_right_arithmetic functions&amp;#44; introduced in IEEE VHDL-2008&amp;#10;~ Self-explanatory&amp;#10;&amp;#10;Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4&amp;#44; extending the hex value to the full width of the target signal.&amp;#10;Use X&amp;quot;0000&amp;quot; format to describe a hexadecimal constant assignment&amp;#44; rather than 16~0000~.&amp;#10;~ Ensure that leading zeros are correct&amp;#44; using binary value in &amp;quot;&amp;quot;&amp;#10;&amp;#10;For assignments such as sigOut = 16{sigIn}&amp;#44; which describes an assignment of each bit of a 16-bit signal sigOut slice to a single-bit signal sigIn&amp;#44; where sigIn can be constant 0&amp;#44; 1 or a signal name&amp;#44; use a VHDL &amp;apos;for loop&amp;#44; end loop&amp;apos; to assign each bit of the sigOut slice to the sigIn value.&amp;#10;An example is MToWB(31 downto 16) = 16(DFrM(15)) generates&amp;#10;for i in 31 downto 16 loop&amp;#10;MToWB(i) &amp;lt;= DFrM(15);&amp;#10;end loop;&amp;#10;~ Can be to a for loop including a repeated single bit value concatentation&amp;#44; i.e&amp;#44; = n{signal} to = signal &amp;amp; signal &amp;amp; signal &amp;amp; signal&amp;#44; e.g&amp;#44; 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) &amp;amp; DFrM(15) &amp;amp; DFrM(15) &amp;amp; DFrM(15).&amp;#10;~ Generate VHDL for each bit of a signal slice to n{signal} in a for loop including a repeated single bit value concatentation&amp;#44; i.e&amp;#44; = n{signal} to = signal &amp;amp; signal &amp;amp; signal &amp;amp; signal&amp;#44; e.g&amp;#44; 16{DFrM(15)} translates to 4{DFrM(15)} represents DFrM(15) &amp;amp; DFrM(15) &amp;amp; DFrM(15) &amp;amp; DFrM(15).&amp;#10;~ This avoids assignments such as sigA &amp;lt;= x&amp;quot;1&amp;quot; where e.g&amp;#44; sigA has been declared as std_logic_vector(31 downto 0) type.&amp;#10;&amp;#10;If a line includes a &amp;gt;&amp;gt;&amp;gt; shift right arithmetic operation&amp;#44; use ieee.numeric_std package shift_right function&amp;#44; assuming signed data.&amp;#10;~ Use &amp;gt;&amp;gt;&amp;gt; pseudo code operator for shift right arithmetic operation. Requires signed functiuon input signals.&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;~ HDLGen-ChatGPT captures the labels for processes&amp;#44; concurrent statements and component instantiation.&amp;#10;&amp;#10;For each line containing &amp;apos;_c:&amp;apos; in the label&amp;#44; generate a concurrent VHDL statement&amp;#44; do not generate a process statement&amp;#44; do not remove the label&amp;#44; remove the &amp;apos;---&amp;apos;&amp;#44; and remove &amp;apos;-- Default assignment&amp;apos;&amp;#10;~ Avoids ChatGPT translating a concurrent statement into a process statement&amp;#10;&amp;#10;Remove all assignments in if or case statements which duplicate the default assignment.&amp;#10;Including null in others case statement if a default assignment is included in a case statement&amp;#10;~ HDLGen-ChatGPT uses a default signal assignment approach for combinational processes. The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.&amp;#10;&amp;#10;&amp;#10;In assignments which include signals with one bit extension&amp;#44; e.g&amp;#44; (0 &amp;amp; CSUpr) or  (1 &amp;amp; CSUpr)&amp;#44; use single quotes around the single bit value 0 or 1. Do not add &amp;quot;&amp;quot;.&amp;#10;For example&amp;#44; generate (&amp;apos;0&amp;apos; &amp;amp; CSUpr) from VHDL (0 &amp;amp; CSUpr)&amp;#10;~ Example: addOut &amp;lt;= std_logic_vector(unsigned(&amp;apos;0&amp;apos; &amp;amp; CSUpr) + unsigned(&amp;apos;0&amp;apos; &amp;amp; addInB));   where addOut signal is 6-bit std_logic_vector(5 downto 0)&amp;#44; CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)&amp;#10;&amp;#10;Remove the &amp;apos;--- &amp;apos;  prefix from the line.&amp;#10;~ logic pseudo code lines are highlighted to ChatGPT with --- prefix&amp;#44; for ChatGPT VHDL generation. Remove the --- after processing.&amp;#10;&amp;#10;Do not remove any library statements&amp;#44; do not add any new library &amp;apos;use&amp;apos; statements&amp;#44; to avoid conflicts with the ieee.numeric_std package functions.&amp;#10;~ Self explanatory&amp;#10;&amp;#10;For all case statements&amp;#44; include &amp;quot;when others =&amp;gt; null;&amp;quot; before every occurrence of an &amp;quot;end case&amp;quot; statement.&amp;#10;~ VHDL syntax requirement&amp;#10;&amp;#10;Only use VHDL which is support by the IEEE VHDL-1987 standard.&amp;#10;~ Not all Electronic Design Automation (EDA) tools support VHDL-2008&amp;#44; so stick with VHDL-1987&amp;#10;&amp;#10;Within all VHDL processes&amp;#44; do not remove the line containing &amp;apos;-- Default assignment&amp;apos;&amp;#44; and place it immediately before the VHDL statements generated for lines containing prefix &amp;apos;--- &amp;apos;.&amp;#10;~ Avoids ChatGPT incorrectly re-ordering statements&amp;#44; and ensures the correct ordering of VHDL statements&amp;#44; provided in HDLGen-ChatGPT HDL template&amp;#10;&amp;#10;~ ***&amp;#10;In all VHDL processes&amp;#44; replace each conditional when else statement with a case statement or an if statement&amp;#44; without removing any signal state check&amp;#44; and not including any assignments which duplicate the assignment labelled &amp;apos;-- Default assignment&amp;apos;&amp;#10;~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008&amp;#44; so do not allow conditional statements&amp;#10;~ ChatGPT does not always follow this prompt&amp;#44; so it may be necessary to submit this prompt again&amp;#44; after the ChatGPT run.&amp;#10;&amp;#10;~repeating&amp;#10;For all VHDL case statements&amp;#44; include &amp;quot;when others =&amp;gt; null;&amp;quot; before every occurrence of an &amp;quot;end case&amp;quot; statement.</VHDLModel>
				<VerilogModel># This ChatGPT message header is used with the HDLGen-generated HDL model template (which can include pseudo code logic descriptions) to generate the complete HDL model.&amp;#10;&amp;#10;Complete the following Verilog model&amp;#44; and output in a single formatted code box.&amp;#10;&amp;#10;For each line between // Title section start and // Title section end&amp;#44; improve formatting of the text.&amp;#10;&amp;#10;Do not include input or output keywords in the module declaration&amp;#10;&amp;#10;For each line containing the prefix &amp;apos;///&amp;apos;&amp;#44; replace with generated Verilog code for the logic described&amp;#44; and remove the &amp;apos;///&amp;apos;.&amp;#10;&amp;#10;For each line containing &amp;apos;_c:&amp;apos; in the label&amp;#44; do not generate a sequential statement&amp;#44; do not remove the label containing &amp;apos;_c:&amp;apos;&amp;#44; remove the &amp;apos;///&amp;apos;&amp;#44; and remove &amp;apos;// Default assignment&amp;apos;&amp;#10;&amp;#10;In VERILOG processes&amp;#44; do not remove the line containing suffix &amp;apos;// Default assignment&amp;apos;&amp;#44; and place it immediately before the VERILOG statements generated for lines containing prefix &amp;apos;/// &amp;apos;.&amp;#10;Place the line containing suffix &amp;apos;// Default assignment&amp;apos; immediately before the VERILOG if statement in lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;Use for loop (format for (i=0; i&amp;lt;32; i=i+1) around complete array signal assignments.&amp;#10;&amp;#10;Leave all labels unchanged.&amp;#10;Place the Verilog process line containing &amp;apos;// Default assignment&amp;apos;&amp;#44; unchanged&amp;#44; and immediately before the VHDL logic generated for lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;Do not output the lines containing prefix &amp;apos;///&amp;apos;.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Include &amp;lt;= operator in assignments.&amp;#10;Make assignment bit widths compatible.&amp;#10;&amp;#10;Keep all { and } characters in the generated Verilog&amp;#10;Keep case assignments separate&amp;#44; as specified in the ChatGPT prompt.&amp;#10;&amp;#10;&amp;#10;&amp;#10;For &amp;lt;&amp;lt;&amp;lt; shift right arithmetic assignment&amp;#44; apply the shift operation on the signed signal value&amp;#44; using $signed()&amp;#10;Remove all lines which contain default:&amp;#10;&amp;#10;&amp;#10;=== For reference. Ignore the following lines.&amp;#10;=== List of Optional ChatGPT messages&amp;#44; which can be submitted individually after the above ChatGPT message&amp;#44; if the Chat GPT output is not fully correct.&amp;#10;Repeat&amp;#44; without outputting lines between &amp;apos;-- Title section start&amp;apos; and &amp;apos;-- Title section end&amp;apos;</VerilogModel>
				<VHDLTestbench>The test plan table format is as follows&amp;#10;row 1: input signal names&amp;#10;row 2: output signal names&amp;#10;row 3: signal radix&amp;#10;row 4: TestNo&amp;#44; delayValue and Note column headings&amp;#10;column 2: TestNo value&amp;#10;column 3: delayValue values&amp;#44; specified as integer or real numbers&amp;#10;&amp;#10;Create a single VHDL process stim_p&amp;#44; in a formatted code box&amp;#44; including the following&amp;#44; for each TestNo value&amp;#44; starting at row 5:&amp;#10;TestNo value.&amp;#10;Comment&amp;#44; included in the table Note column.&amp;#10;Assignment of all of the input signals to the values in the input signal columns&amp;#44; even if the signal value has not changed since the previous test. Do not assign any output signals. Use the VHDL signal radix format defined in table row 3&amp;#44; i.e&amp;#44; &amp;quot;&amp;quot; for binary and x&amp;quot;&amp;quot; for hexadecimal.&amp;#10;wait for delayValue * period&amp;#44; where integer or real numbered delayValue is specified in column 3&amp;#44; and including brackets () around delayValue * period.&amp;#10;Compare all output signal values with the corresponding output signal values in the table&amp;#44; outputting a warning message if the values do not match. Do not test input signal values.&amp;#10;&amp;#10;Do not include any VHDL variables&amp;#10;~&amp;#x9;Do not include any VHDL loop in the output.&amp;#10;~&amp;#x9;Do not include &amp;apos;case TestNo&amp;apos; in the output.&amp;#10;~&amp;#x9;Do not include any other delay statements.&amp;#10;~&amp;#x9;Do not include any other delay statements in the output.&amp;#10;~&amp;#x9;Do not include any VHDL functions or procedures in the output.&amp;#10;~&amp;#x9;Do not ask me to add more tests. Please generate the code for all of the test cases.</VHDLTestbench>
				<VerilogTestbench>#&amp;#10;&amp;#10;The test plan table format includes&amp;#10;row 1: input signal names&amp;#10;row 2: output signal names&amp;#10;row 3: signal radix&amp;#10;row 4: TestNo&amp;#44; delay and Note column headings&amp;#10;column 2: TestNo test number&amp;#10;column 3: delay value&amp;#44; of type integer or real&amp;#10;&amp;#10;Create a single VERILOG initial statement&amp;#44; in a formatted code box&amp;#44; without any loops&amp;#10;&amp;#10;For each TestNo row from value 1&amp;#44; output the following&amp;#10;TestNo value&amp;#10;Comment&amp;#44; included in the table Note column.&amp;#10;Assignment of every input signal&amp;#44; irrespective of its value. Do not assign any output signals. Use the Verilog signal radix format defined in table row 3&amp;#10;A test of each output signal value and message&amp;#44; comparing it with the value included in its corresponding output signal column in the table. Output a failing message if the values do not match. Do not test input signal values.&amp;#10;&amp;#10;Do not include a loop in the output.&amp;#10;Do not include &amp;apos;case TestNo&amp;apos; in the output.&amp;#10;Do not include any other delay statements&amp;#10;Do not ask me to Add more test. Please generate them all.</VerilogTestbench>
			</commands>
		</chatgpt>
	</hdlDesign>
</HDLGen>